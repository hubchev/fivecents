getOption("Ncpus", 1L)
## [1] 6
parallel::detectCores()
# [1] 8
file.exists("~/.Rprofile")
Sys.getenv("HOME")
Sys.getenv("HOME")
file.exists("~/.Rprofile")
getOption("Ncpus", 1L)
## [1] 6
getOption("Ncpus", 1L)
update.packages()
?update.packages()
update.packages(ask = F)
update.packages(ask = F)
install.packages("tidyverse")
daily <- flights |>
group_by(year, month, day)
library(nycflights13)
library(tidyverse)
inst
install.packages("nycflights13")
library(nycflights13)
library(tidyverse)
daily <- flights |>
group_by(year, month, day)
daily
daily_flights <- daily |>
summarize(n = n())
daily
View(daily_flights)
rm(list = ls())
wt <- c(5,  2,  2,  1)
x <- c(1,2,3,4)
x_mean <- mean(x)
x_wt_mean_1 <- weighted.mean(x, wt)
product <- wt*x
nom <- sum(product)
denom <- sum(wt)
x_wt_mean_2 <- nom/denom
library("car")
install.packages("cardata")
install.packages("carData")
install.packages("carData")
library("car")
?leveneTest
?rowwise
??rowwise
?slice
source("~/.active-rstudio-document", echo=TRUE)
Data = read.table(header=TRUE, stringsAsFactors=TRUE, text="
Diet    Country  Weight_change
A       USA      0.120
A       USA      0.125
A       USA      0.112
A       UK       0.052
A       UK       0.055
A       UK       0.044
B       USA      0.096
B       USA      0.100
B       USA      0.089
B       UK       0.025
B       UK       0.029
B       UK       0.019
C       USA      0.149
C       USA      0.150
C       USA      0.142
C       UK       0.077
C       UK       0.080
C       UK       0.066
")
Data$Country <- factor(Data$Country,
levels=unique(Data$Country))
library(psych)
headTail(Data)
str(Data)
summary(Data)
interaction.plot(x.factor     = Data$Country,
trace.factor = Data$Diet,
response     = Data$Weight_change,
fun = mean,
type="b",
col=c("black","red","green"),  ### Colors for levels of trace var.
pch=c(19, 17, 15),             ### Symbols for levels of trace var.
fixed=TRUE,                    ### Order by factor order in data
leg.bty = "o")
View(Data)
model = lm(Weight_change ~ Country + Diet + Country:Diet,
data = Data)
library(car)
Anova(model,
type = "II")
?interaction.plot
devtools::has_devel()
install.packages("reprex")
library("reprex")
?reprex
reprex()
reprex()
install.packages("ez")
Result.Model <- ezANOVA(data = my.dat2, dv = .(Conduc), wid = .(ID2),
within = .(Time), between = .(Age),
detailed = TRUE, type = 3)
# install.packages("ez")
library(ez)
Result.Model <- ezANOVA(data = my.dat2, dv = .(Conduc), wid = .(ID2),
within = .(Time), between = .(Age),
detailed = TRUE, type = 3)
?ezANOVA
data(ANT)
rt_anova = ezANOVA(
data = ANT[ANT$error==0,]
, dv = rt
, wid = subnum
, within = .(cue,flank)
, between = group
)
ezPrecis(ANT)
print(rt_anova)
interaction.plot(x.factor     = ANT$group,
trace.factor = ANT$block,
response     = ANT$trial,
fun = mean,
type="b",
col=c("black","red","green"),  ### Colors for levels of trace var.
pch=c(19, 17, 15),             ### Symbols for levels of trace var.
fixed=TRUE,                    ### Order by factor order in data
leg.bty = "o")
interaction.plot(x.factor     = ANT$group,
trace.factor = ANT$block,
response     = ANT$cue,
fun = mean,
type="b",
col=c("black","red","green"),  ### Colors for levels of trace var.
pch=c(19, 17, 15),             ### Symbols for levels of trace var.
fixed=TRUE,                    ### Order by factor order in data
leg.bty = "o")
interaction.plot(x.factor     = ANT$group,
trace.factor = ANT$block,
response     = ANT$rt,
fun = mean,
type="b",
col=c("black","red","green"),  ### Colors for levels of trace var.
pch=c(19, 17, 15),             ### Symbols for levels of trace var.
fixed=TRUE,                    ### Order by factor order in data
leg.bty = "o")
ezPrecis(Data)
interaction.plot(x.factor     = Data$Country,
trace.factor = Data$Diet,
response     = Data$Weight_change,
fun = mean,
type="b",
col=c("black","red","green"),  ### Colors for levels of trace var.
pch=c(19, 17, 15),             ### Symbols for levels of trace var.
fixed=TRUE,                    ### Order by factor order in data
leg.bty = "o")
View(Data)
# libraries:
library(ggplot2)
library(gganimate)
install.packages("gganimate")
gganimate
library("gganimate")
install.packages("gifski")
install.packages("av")
install.packages("av")
library("gganimate")
library("gganimate")
# Make 2 basic states and concatenate them:
a <- data.frame(group=c("A","B","C"), values=c(3,2,4), frame=rep('a',3))
b <- data.frame(group=c("A","B","C"), values=c(5,3,7), frame=rep('b',3))
data <- rbind(a,b)
# Basic barplot:
ggplot(a, aes(x=group, y=values, fill=group)) +
geom_bar(stat='identity')
# Make a ggplot, but add frame=year: one image per year
ggplot(data, aes(x=group, y=values, fill=group)) +
geom_bar(stat='identity') +
theme_bw() +
# gganimate specific bits:
transition_states(
frame,
transition_length = 2,
state_length = 1
) +
ease_aes('sine-in-out')
getwd
getwd()
# Save at gif:
anim_save("288-animated-barplot-transition.gif")
?anim_save
# Save at gif:
anim_save("288-animated-barplot-transition.gif", animation = last_animation())
library(gifski)
library(png)
install.packages("gifski")
library(gifski)
library(png)
# Make 2 basic states and concatenate them:
a <- data.frame(group=c("A","B","C"), values=c(3,2,4), frame=rep('a',3))
b <- data.frame(group=c("A","B","C"), values=c(5,3,7), frame=rep('b',3))
data <- rbind(a,b)
# Basic barplot:
ggplot(a, aes(x=group, y=values, fill=group)) +
geom_bar(stat='identity')
# Make a ggplot, but add frame=year: one image per year
ggplot(data, aes(x=group, y=values, fill=group)) +
geom_bar(stat='identity') +
theme_bw() +
# gganimate specific bits:
transition_states(
frame,
transition_length = 2,
state_length = 1
) +
ease_aes('sine-in-out')
# Save at gif:
anim_save("288-animated-barplot-transition.gif", animation = last_animation())
# Save at gif:
anim_save(renderer=gifski_renderer("test.gif"))
animate(gg, renderer = gifski_renderer())
# Make a ggplot, but add frame=year: one image per year
ggplot(data, aes(x=group, y=values, fill=group)) +
geom_bar(stat='identity') +
theme_bw() +
# gganimate specific bits:
transition_states(
frame,
transition_length = 2,
state_length = 1
) +
ease_aes('sine-in-out') -> gg
animate(gg, renderer = gifski_renderer())
anim_save(filename="usanames.gif", animation=gg, location)
anim_save(filename="usanames.gif", animation=gg)
# Save at gif:
anim_save(renderer=gifski_renderer("test.gif"))
anim_save(filename="usanames.gif", animation=gg, renderer=gifski_renderer("test.gif"))
??cut2
rm(list = ls())
wt <- c(5,  2,  2,  1)
x <- c(1,2,3,4)
x_mean <- mean(x)
x_wt_mean_1 <- weighted.mean(x, wt)
product <- wt*x
nom <- sum(product)
denom <- sum(wt)
x_wt_mean_2 <- nom/denom
library(pacman)
install.package("pacman")
install.packages("pacman")
library(pacman)
p_update
p_update()
update.packages(ask=F)
update.packages()
q(ask=F)
?q()
q("yes")
data(iris)
iris_data <- iris[, 1:2]
set.seed(123)
kmeans_result <- kmeans(iris_data, centers = 3)
print(kmeans_result)
install.packages("ggplot2")
library(ggplot2)
iris$Cluster <- as.factor(kmeans_result$cluster)
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, color = Cluster)) +
geom_point(size = 3) +
labs(title = "K-Means Clustering on Iris Data", x = "Sepal Length", y = "Sepal Width")
print(kmeans_result)
source("~/.active-rstudio-document", echo=TRUE)
install.packages("ggplot2")
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
?kmeans
source("~/.active-rstudio-document", echo=TRUE)
setwd(/home/sthu/Dropbox/hsf/github/fivecents/)
setwd("/home/sthu/Dropbox/hsf/github/fivecents/")
setwd("~/Music/jun26")
quarto::quarto_use_template("hubchev/temp_apa_en")
install.packages("usethis")
library("usethis")
usethis::use_course("hubchev/temp_apa_en", destdir = getwd())
Familiarize
setwd("~/Music/jun26")
quarto::quarto_use_template("wjschne/apaquarto")
#| label: setup
#| include: false
library(conflicted)
library(tidyverse)
library(flextable)
library(ftExtra)
library(knitr)
library(tinytable)
conflicts_prefer(dplyr::filter, .quiet = TRUE)
conflicts_prefer(flextable::separate_header, .quiet = TRUE)
#| label: fig-myplot
#| fig-cap: The Figure Caption
#| apa-note: This is the note below the figure.
#| fig-height: 2
#| fig-width: 3
ggplot(data.frame(x = c(0, 35)), aes(x)) +
stat_function(fun = dchisq,
args = list(df = 10),
geom = "area",
n = 1000,
color = NA,
fill = "#41448780") +
theme_void(base_size = 18)
#| label: tbl-mytable
#| tbl-cap: The Table Caption.
#| apa-note: This is the first paragraph.|This is a second paragraph. It is separated with the pipe character.
tibble(Numbers = seq(1,4), Letters = LETTERS[seq(Numbers)]) %>%
knitr::kable()
